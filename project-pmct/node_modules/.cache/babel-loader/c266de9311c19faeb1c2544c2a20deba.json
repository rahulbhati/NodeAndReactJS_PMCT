{"ast":null,"code":"var Classes = Object.create(null);\n/**\r\n * Create a new Connection instance.\r\n * @param {object|string} config Configuration or connection string for new MySQL connection\r\n * @return {Connection} A new MySQL connection\r\n * @public\r\n */\n\nexports.createConnection = function createConnection(config) {\n  var Connection = loadClass('Connection');\n  var ConnectionConfig = loadClass('ConnectionConfig');\n  return new Connection({\n    config: new ConnectionConfig(config)\n  });\n};\n/**\r\n * Create a new Pool instance.\r\n * @param {object|string} config Configuration or connection string for new MySQL connections\r\n * @return {Pool} A new MySQL pool\r\n * @public\r\n */\n\n\nexports.createPool = function createPool(config) {\n  var Pool = loadClass('Pool');\n  var PoolConfig = loadClass('PoolConfig');\n  return new Pool({\n    config: new PoolConfig(config)\n  });\n};\n/**\r\n * Create a new PoolCluster instance.\r\n * @param {object} [config] Configuration for pool cluster\r\n * @return {PoolCluster} New MySQL pool cluster\r\n * @public\r\n */\n\n\nexports.createPoolCluster = function createPoolCluster(config) {\n  var PoolCluster = loadClass('PoolCluster');\n  return new PoolCluster(config);\n};\n/**\r\n * Create a new Query instance.\r\n * @param {string} sql The SQL for the query\r\n * @param {array} [values] Any values to insert into placeholders in sql\r\n * @param {function} [callback] The callback to use when query is complete\r\n * @return {Query} New query object\r\n * @public\r\n */\n\n\nexports.createQuery = function createQuery(sql, values, callback) {\n  var Connection = loadClass('Connection');\n  return Connection.createQuery(sql, values, callback);\n};\n/**\r\n * Escape a value for SQL.\r\n * @param {*} value The value to escape\r\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\r\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\r\n * @return {string} Escaped string value\r\n * @public\r\n */\n\n\nexports.escape = function escape(value, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.escape(value, stringifyObjects, timeZone);\n};\n/**\r\n * Escape an identifier for SQL.\r\n * @param {*} value The value to escape\r\n * @param {boolean} [forbidQualified=false] Setting to treat '.' as part of identifier\r\n * @return {string} Escaped string value\r\n * @public\r\n */\n\n\nexports.escapeId = function escapeId(value, forbidQualified) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.escapeId(value, forbidQualified);\n};\n/**\r\n * Format SQL and replacement values into a SQL string.\r\n * @param {string} sql The SQL for the query\r\n * @param {array} [values] Any values to insert into placeholders in sql\r\n * @param {boolean} [stringifyObjects=false] Setting if objects should be stringified\r\n * @param {string} [timeZone=local] Setting for time zone to use for Date conversion\r\n * @return {string} Formatted SQL string\r\n * @public\r\n */\n\n\nexports.format = function format(sql, values, stringifyObjects, timeZone) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.format(sql, values, stringifyObjects, timeZone);\n};\n/**\r\n * Wrap raw SQL strings from escape overriding.\r\n * @param {string} sql The raw SQL\r\n * @return {object} Wrapped object\r\n * @public\r\n */\n\n\nexports.raw = function raw(sql) {\n  var SqlString = loadClass('SqlString');\n  return SqlString.raw(sql);\n};\n/**\r\n * The type constants.\r\n * @public\r\n */\n\n\nObject.defineProperty(exports, 'Types', {\n  get: loadClass.bind(null, 'Types')\n});\n/**\r\n * Load the given class.\r\n * @param {string} className Name of class to default\r\n * @return {function|object} Class constructor or exports\r\n * @private\r\n */\n\nfunction loadClass(className) {\n  var Class = Classes[className];\n\n  if (Class !== undefined) {\n    return Class;\n  } // This uses a switch for static require analysis\n\n\n  switch (className) {\n    case 'Connection':\n      Class = require('./lib/Connection');\n      break;\n\n    case 'ConnectionConfig':\n      Class = require('./lib/ConnectionConfig');\n      break;\n\n    case 'Pool':\n      Class = require('./lib/Pool');\n      break;\n\n    case 'PoolCluster':\n      Class = require('./lib/PoolCluster');\n      break;\n\n    case 'PoolConfig':\n      Class = require('./lib/PoolConfig');\n      break;\n\n    case 'SqlString':\n      Class = require('./lib/protocol/SqlString');\n      break;\n\n    case 'Types':\n      Class = require('./lib/protocol/constants/types');\n      break;\n\n    default:\n      throw new Error('Cannot find class \\'' + className + '\\'');\n  } // Store to prevent invoking require()\n\n\n  Classes[className] = Class;\n  return Class;\n}","map":null,"metadata":{},"sourceType":"script"}